{"version":3,"sources":["Search.js","Nav.js","Home.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","useState","searchValue","setSearch","movies","setMovies","inputValue","setInput","useEffect","a","fetch","then","response","json","fetchData","setThem","htmlFor","id","type","name","onChange","e","preventDefault","target","value","className","onClick","Nav","to","process","Home","Response","map","movie","imdbID","key","src","Poster","alt","Title","Details","setMovie","Year","Director","Actors","Plot","Ratings","rate","Source","Value","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69627060.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\n\nconst Search = props => {\n  const [searchValue, setSearch] = useState('friends');\n  const [movies, setMovies] = useState([]);\n  const [inputValue, setInput] = useState('');\n\n  useEffect(() => {\n    async function fetchData() {\n      await fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=7f555475`)\n        .then(response => response.json())\n        .then(json => setMovies(json));\n    }\n    fetchData();\n  }, [searchValue]);\n\n  props.setThem(movies);\n\n  return (\n    <Fragment>\n      <form>\n        <label htmlFor=\"search-input\">Search for Movie</label>\n        <input\n          id=\"search-input\"\n          type=\"text\"\n          name=\"search-field\"\n          onChange={e => {\n            e.preventDefault();\n            setInput(e.target.value);\n          }}\n        ></input>\n        <input\n          className=\"search-button\"\n          type=\"submit\"\n          value=\"Search it\"\n          onClick={e => {\n            e.preventDefault();\n            setSearch(inputValue);\n          }}\n        ></input>\n      </form>\n    </Fragment>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { Link } from '@reach/router';\n\nconst Nav = () => {\n  return (\n    <Link className=\"nav home-link\" to={`${process.env.PUBLIC_URL}/`}>\n      OMDB Movie Search\n    </Link>\n  );\n};\n\nexport default Nav;\n","import React, { Fragment, useState } from 'react';\nimport { Link } from '@reach/router';\nimport Search from './Search';\nimport Nav from './Nav';\nimport './Home.scss';\n\nconst Home = () => {\n  const [movies, setThem] = useState([]);\n\n  return (\n    <Fragment>\n      <Nav />\n      <Search setThem={setThem} />\n      <div className=\"search-result\">\n        {movies.Response === 'True'\n          ? movies.Search.map(movie => {\n              return (\n                <Link\n                  to={`${process.env.PUBLIC_URL}/detail/${movie.imdbID}`}\n                  key={movie.imdbID}\n                >\n                  <section className=\"poster\">\n                    <img src={movie.Poster} alt={movie.Title} />\n                    <div className=\"overlay\">\n                      <p className=\"text-center title bold\">{movie.Title}</p>\n                    </div>\n                  </section>\n                </Link>\n              );\n            })\n          : null}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport './Details.scss';\nimport Nav from './Nav';\n\nconst Details = props => {\n  const [movie, setMovie] = useState('');\n\n  useEffect(() => {\n    async function fetchData() {\n      await fetch(`https://www.omdbapi.com/?i=${props.id}&apikey=7f555475`)\n        .then(response => response.json())\n        .then(json => setMovie(json));\n    }\n    fetchData();\n  }, [props.id]);\n  return props.id ? (\n    <Fragment>\n      <Nav />\n      <div className=\"outer-container\">\n        <div className=\"left\">\n          <header className=\"flex\">\n            <h1>{movie.Title}</h1>\n            <p className=\"year\">{`Released: ${movie.Year}`}</p>\n            <p className=\"director bold\">{`Director: ${movie.Director}`}</p>\n          </header>\n          <section className=\"actors text-center\">\n            <p className=\"actors-title bold\">Actors</p>\n            <p>{movie.Actors}</p>\n          </section>\n          <section className=\"plot text-center\">\n            <p className=\"plot-title bold\">Plot</p>\n            <p className=\"plot_description\">{movie.Plot}</p>\n          </section>\n        </div>\n        <section className=\"ratings\">\n          {movie.Ratings\n            ? movie.Ratings.map(rate => {\n                return (\n                  <div className=\"flex ratings-container\" key={rate.Source}>\n                    <p className=\"ratings-source bold\">{rate.Source}</p>\n                    <p className=\"ratings-score\">{rate.Value}</p>\n                  </div>\n                );\n              })\n            : null}\n        </section>\n        <div className=\"right\">\n          <section className=\"poster\">\n            <img src={movie.Poster} key={movie.imdbID} alt={movie.Title} />\n          </section>\n        </div>\n      </div>\n    </Fragment>\n  ) : null;\n};\n\nexport default Details;\n","import React, { Fragment } from 'react';\nimport Home from './Home';\nimport { Router } from '@reach/router';\nimport Details from './Details';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Router path={`${process.env.PUBLIC_URL}/public/apps/movie-search`}>\n        <Home path={`${process.env.PUBLIC_URL}/`}></Home>\n        <Details path={`${process.env.PUBLIC_URL}/detail/:id`} />\n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}