{"version":3,"sources":["Search.js","Nav.js","Home.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","useState","inputValue","setInput","selectValue","setSelect","searchValue","setSearch","currentPage","setPage","maxPages","setPages","pageArray","setPageArray","setThem","useEffect","a","fetch","then","response","json","totalResults","fetchData","pageNumbersArray","maxPagesNumber","Math","ceil","i","push","style","label","marginTop","paginationContainer","display","htmlFor","id","type","name","onChange","e","preventDefault","target","value","console","log","length","map","number","key","className","onClick","disabled","Nav","to","process","Home","movies","Response","movie","imdbID","src","Poster","alt","Title","Error","marginLeft","marginRight","Details","setMovie","Year","Director","Actors","Plot","Ratings","rate","Source","Value","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3c3a9d3.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\n\nconst Search = props => {\n  const [inputValue, setInput] = useState('');\n  const [selectValue, setSelect] = useState('movie');\n  const [searchValue, setSearch] = useState('');\n  const [currentPage, setPage] = useState(1);\n  const [maxPages, setPages] = useState();\n  const [pageArray, setPageArray] = useState([]);\n\n  const { setThem } = props;\n\n  useEffect(() => {\n    async function fetchData() {\n      await fetch(\n        `https://www.omdbapi.com/?s=${searchValue}&type=${selectValue}&page=${currentPage}&apikey=7f555475`\n      )\n        .then(response => response.json())\n        .then(json => {\n          setThem(json);\n          setPages(json.totalResults);\n        });\n    }\n    fetchData();\n  }, [searchValue, setThem, selectValue, currentPage]);\n\n  useEffect(() => {\n    const pageNumbersArray = [];\n    const maxPagesNumber = Math.ceil(maxPages / 10);\n    for (let i = 1; i <= maxPagesNumber; i++) {\n      pageNumbersArray.push(i);\n    }\n    setPageArray(pageNumbersArray);\n  }, [maxPages]);\n\n  const handleSearchInput = e => {\n    e.preventDefault();\n    setInput(e.target.value);\n  };\n\n  const handleTypeSelection = e => {\n    e.preventDefault();\n    setSelect(e.target.value);\n    setPage('1');\n  };\n\n  const handleSearch = e => {\n    e.preventDefault();\n    setSearch(inputValue);\n    setPage('1');\n  };\n\n  const handlePageSelection = e => {\n    e.preventDefault();\n    setPage(e.target.value);\n  };\n\n  const style = {\n    label: {\n      marginTop: '15px'\n    },\n    paginationContainer: {\n      display: 'flex'\n    }\n  };\n\n  return (\n    <Fragment>\n      <form>\n        <label htmlFor='search-input'>Search for Movie</label>\n        <input\n          id='search-input'\n          type='text'\n          name='search-field'\n          onChange={handleSearchInput}\n        ></input>\n        {inputValue ? (\n          <Fragment>\n            {console.log(currentPage)}\n            <label style={style.label} htmlFor='type'>\n              Select type(Default Movie)\n            </label>\n            <select\n              id='type'\n              onChange={handleTypeSelection}\n              value={selectValue}\n            >\n              <option value='movie'>Movie</option>\n              <option value='series'>Series</option>\n              <option value='episode'>Episode</option>\n            </select>\n            {pageArray.length ? (\n              <select\n                id='page-number'\n                style={style.paginationContainer}\n                onChange={handlePageSelection}\n                value={currentPage}\n              >\n                {pageArray.map(number => (\n                  <option value={number} key={number}>\n                    {number}\n                  </option>\n                ))}\n              </select>\n            ) : null}\n          </Fragment>\n        ) : null}\n        {inputValue.length >= 3 ? (\n          <input\n            className='search-button'\n            type='submit'\n            value='Search it'\n            onClick={handleSearch}\n          ></input>\n        ) : (\n          <input\n            className='search-button'\n            disabled\n            type='submit'\n            value='Search it'\n          ></input>\n        )}\n      </form>\n    </Fragment>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { Link } from '@reach/router';\nimport './Nav.scss';\n\nconst Nav = () => {\n  return (\n    <Link className='nav home-link' to={`${process.env.PUBLIC_URL}/`}>\n      OMDB Movie Search\n    </Link>\n  );\n};\n\nexport default Nav;\n","import React, { Fragment, useState } from 'react';\nimport { Link } from '@reach/router';\nimport Search from './Search';\nimport Nav from './Nav';\nimport './Home.scss';\n\nconst Home = () => {\n  const [movies, setThem] = useState([]);\n\n  const style = {\n    h1: {\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    }\n  };\n\n  return (\n    <Fragment>\n      <Nav />\n      <Search setThem={setThem} />\n      <div className='search-result'>\n        {movies.Response === 'True' ? (\n          movies.Search.map(movie => {\n            return (\n              <Link\n                to={`${process.env.PUBLIC_URL}/detail/${movie.imdbID}`}\n                key={movie.imdbID}\n              >\n                <section className='poster'>\n                  <img src={movie.Poster} alt={movie.Title} />\n                  <div className='overlay'>\n                    <p className='text-center title bold'>{movie.Title}</p>\n                  </div>\n                </section>\n              </Link>\n            );\n          })\n        ) : movies.Error === 'Movie not found!' ? (\n          <h1 style={style.h1}>\n            Episode(s) not found. Change type or search for something else\n          </h1>\n        ) : null}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport './Details.scss';\nimport Nav from './Nav';\n\nconst Details = props => {\n  const [movie, setMovie] = useState('');\n\n  useEffect(() => {\n    async function fetchData() {\n      await fetch(`https://www.omdbapi.com/?i=${props.id}&apikey=7f555475`)\n        .then(response => response.json())\n        .then(json => setMovie(json));\n    }\n    fetchData();\n  }, [props.id]);\n\n  return props.id ? (\n    <Fragment>\n      <Nav />\n      <div className='outer-container'>\n        <div className='left'>\n          <header className='flex'>\n            <h1>{movie.Title}</h1>\n            <p className='year'>{`Released: ${movie.Year}`}</p>\n            <p className='director bold'>{`Director: ${movie.Director}`}</p>\n          </header>\n          <section className='actors text-center'>\n            <p className='actors-title bold'>Actors</p>\n            <p>{movie.Actors}</p>\n          </section>\n          <section className='plot text-center'>\n            <p className='plot-title bold'>Plot</p>\n            <p className='plot_description'>{movie.Plot}</p>\n          </section>\n        </div>\n        <section className='ratings'>\n          {movie.Ratings\n            ? movie.Ratings.map(rate => {\n                return (\n                  <div className='flex ratings-container' key={rate.Source}>\n                    <p className='ratings-source bold'>{rate.Source}</p>\n                    <p className='ratings-score'>{rate.Value}</p>\n                  </div>\n                );\n              })\n            : null}\n        </section>\n        <div className='right'>\n          <section className='poster'>\n            <img src={movie.Poster} key={movie.imdbID} alt={movie.Title} />\n          </section>\n        </div>\n      </div>\n    </Fragment>\n  ) : null;\n};\n\nexport default Details;\n","import React, { Fragment } from 'react';\nimport Home from './Home';\nimport { Router } from '@reach/router';\nimport Details from './Details';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Router path={`${process.env.PUBLIC_URL}/public/apps/movie-search`}>\n        <Home path={`${process.env.PUBLIC_URL}/`}></Home>\n        <Details path={`${process.env.PUBLIC_URL}/detail/:id`} />\n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}